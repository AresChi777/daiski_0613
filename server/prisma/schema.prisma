generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  category_id      Int?
  brand_id         Int?
  introduction     String?           @db.Text
  spec             String?           @db.Text
  created_at       DateTime          @default(now()) @db.DateTime(0)
  publish_at       DateTime?         @db.DateTime(0)
  unpublish_at     DateTime?         @db.DateTime(0)
  delete_at        DateTime?         @db.DateTime(0)
  product_brand    product_brand?    @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_product_brand")
  product_category product_category? @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "product_ibfk_1")
  product_image    product_image[]
  product_sku      product_sku[]

  @@index([category_id], map: "category_id")
  @@index([brand_id], map: "fk_product_brand")
}

model product_brand {
  id         Int       @id @default(autoincrement())
  name       String    @unique(map: "name") @db.VarChar(255)
  sort_order Int?      @default(0)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  product    product[]
}

model product_category {
  id                                                                       Int                     @id @default(autoincrement())
  name                                                                     String                  @db.VarChar(100)
  parentId                                                                 Int?
  gender                                                                   Int                     @default(0) @db.TinyInt
  created_at                                                               DateTime                @default(now()) @db.Timestamp(0)
  updated_at                                                               DateTime                @default(now()) @db.DateTime(0)
  deleted_at                                                               DateTime?               @db.DateTime(0)
  product                                                                  product[]
  product_category                                                         product_category?       @relation("product_categoryToproduct_category", fields: [parentId], references: [id], onUpdate: Restrict, map: "product_category_ibfk_1")
  other_product_category                                                   product_category[]      @relation("product_categoryToproduct_category")
  product_category_path_product_category_path_ancestorToproduct_category   product_category_path[] @relation("product_category_path_ancestorToproduct_category")
  product_category_path_product_category_path_descendantToproduct_category product_category_path[] @relation("product_category_path_descendantToproduct_category")

  @@index([parentId], map: "parent_id")
}

model product_category_path {
  ancestor                                                            Int
  descendant                                                          Int
  depth                                                               Int
  product_category_product_category_path_ancestorToproduct_category   product_category @relation("product_category_path_ancestorToproduct_category", fields: [ancestor], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_ancestor")
  product_category_product_category_path_descendantToproduct_category product_category @relation("product_category_path_descendantToproduct_category", fields: [descendant], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_descendant")

  @@id([ancestor, descendant])
  @@index([descendant], map: "idx_descendant")
}

model product_image {
  id         Int      @id @default(autoincrement())
  product_id Int
  url        String   @db.VarChar(255)
  sort_order Int?     @default(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
  valid      Int      @default(1) @db.TinyInt
  product    product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_image_ibfk_1")

  @@index([product_id], map: "product_id")
}

model product_rating {
  id          Int       @id @default(autoincrement())
  user_id     Int
  order_id    Int       @unique(map: "ux_order_rating")
  product_id  Int
  rating      Decimal   @db.Decimal(2, 1)
  review_text String?   @db.Text
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime  @default(now()) @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
}

model product_size {
  id          Int           @id @default(autoincrement())
  name        String        @unique(map: "name") @db.VarChar(10)
  sort_order  Int           @default(0)
  product_sku product_sku[]
}

model product_sku {
  id           Int           @id @default(autoincrement())
  product_id   Int
  size_id      Int?
  sku_code     String        @unique(map: "uq_sku_code") @db.VarChar(100)
  stock        Int?          @default(0)
  price        Int
  created_at   DateTime?     @default(now()) @db.DateTime(0)
  updated_at   DateTime?     @default(now()) @db.DateTime(0)
  deleted_at   DateTime?     @db.DateTime(0)
  product      product       @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "product_sku_ibfk_1")
  product_size product_size? @relation(fields: [size_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "product_sku_ibfk_2")

  @@unique([product_id, size_id], map: "uq_sku_unique")
  @@index([size_id], map: "size_id")
}
/// 活動類型
enum ActivityType {
  SKI  @map("滑雪")
  HIKE @map("登山")
  CAMP @map("露營")
}

/// 滑雪難易度
enum SkiDifficulty {
  BEGINNER @map("初級")
  INTER    @map("中級")
  ADVANCE  @map("進階")
}

/// 訊息類型（文字／照片）
enum MessageType {
  TEXT  @map("text")
  IMAGE @map("image")
}

model User {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(20)
  account      String          @db.VarChar(20)
  password     String          @db.VarChar(20)
  phone        String?         @db.VarChar(10)
  birthday     DateTime?
  email        String?         @db.VarChar(255)
  createdTime  DateTime        @default(now()) @map("createdtime")
  isCoach      Boolean         @default(false)  @map("isCoach")
  valid        Boolean         @default(true)

  // relations
  groups       Group[]         @relation("OrganizerGroups")
  memberships  GroupMember[]
  comments     GroupComment[]
  messages     ChatMessage[]
}

model Location {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  address    String    @db.VarChar(255)
  city       String    @db.VarChar(100)
  country    String    @db.VarChar(100)
  latitude   Decimal   @db.Decimal(20,17)
  longitude  Decimal   @db.Decimal(20,17)
  createdAt  DateTime  @default(now()) @map("created_at")

  // relations
  groups     Group[]
}

model Group {
  id           Int             @id @default(autoincrement())
  userId       Int             @map("user_id")
  user         User            @relation("OrganizerGroups", fields: [userId], references: [id])
  locationId   Int             @map("location_id")
  location     Location        @relation(fields: [locationId], references: [id])

  title        String          @db.VarChar(100)
  type         ActivityType
  difficulty   SkiDifficulty?
  startDate    DateTime        @map("start_date")
  endDate      DateTime        @map("end_date")
  minPeople    Int             @map("min_people")
  maxPeople    Int             @map("max_people")
  price        Int
  description  String?         @db.Text
  allowNewbie  Boolean         @default(false) @map("allow_newbie")

  createdAt    DateTime        @default(now()) @map("created_at")
  endAt        DateTime?       @map("end_at")
  deletedAt    DateTime?       @map("deleted_at")

  // relations
  members      GroupMember[]
  images       GroupImage[]
  comments     GroupComment[]
  chatRoom     ChatRoom?       // inverse side of ChatRoom.group
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    Int
  joinedAt  DateTime @default(now()) @map("joined_at")
  paidAt    DateTime? @map("paid_at")

  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model GroupImage {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  imageUrl  String   @map("image_url")
  sortOrder Int      @default(0) @map("sort_order")

  group     Group    @relation(fields: [groupId], references: [id])
}

model GroupComment {
  id         Int      @id @default(autoincrement())
  groupId    Int      @map("group_id")
  userId     Int      @map("user_id")
  content    String
  createdAt  DateTime @default(now()) @map("created_at")
  replyId    Int?     @map("reply_id")

  group      Group    @relation(fields: [groupId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  groupId       Int       @id @map("group_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  lastMessageAt DateTime? @map("last_message_at")

  group         Group     @relation(fields: [groupId], references: [id])
  messages      ChatMessage[]
}

model ChatMessage {
  id          Int         @id @default(autoincrement())
  groupId     Int         @map("group_id")
  userId      Int         @map("user_id")
  content     String
  messageType MessageType @default(TEXT) @map("message_type")
  sentAt      DateTime    @default(now()) @map("sent_at")
  isRead      Boolean?    @map("is_read")

  room        ChatRoom    @relation(fields: [groupId], references: [groupId])
  user        User        @relation(fields: [userId],  references: [id])
}